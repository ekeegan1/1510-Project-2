/* EECS 1510 Spring 2021
 * Project 2
 * Author: Ethan A. Keegan
 * March 8, 2021 
 *
 * Note From Author:
		In this project, I display my knowledge and experience with working between classes extending from an abstract class. There are many elements used in
		this project that I have learned throughout this semester such as arrays and objects. What this program does is takes points from multiple .txt files
		and creates them into objects. These objects are generated by my classes: Rectangle2D, Triangle2D, and MyPoint. From there, I take the information given and 
		display them in a chart given by Dr. Hobbs. In this chart, there are many things displayed, such as the Area and Perimeter of the given object 
		(triangle and rectangle) as well as some others from my class's methods. There are many notes thrown in throughout the program to more closely describe what is going on.
		

 * The purpose of this project is to give students an opportunity to demonstrate
 * their mastering of the skills acquired in Chapters 9 - 13 of Daniel Liang's
 * Introduction to Object Oriented Programming using Java, 12th Edition.
 * 
 * The students will have an opportunity to demonstrate the following skills as
 * well as others:
 * 		1) Inheritance
 * 		2) File I/0
 * 		3) Exception Handling
 * 		4) Abstract Classes
 * 		5) Formatting Output/Tabulating Results
 * 		
 * The project will be assigned on March 8th, 2021 and students will have until
 * April 4, 2021 at 11:59 PM to submit their work to BB.
 */


//import statements go here.
import java.util.*;
import java.io.*;

public class GeometricFigures
{
  public static void main(String[] args) throws Exception
  {
	//create an array to store objects called triangles.
		Triangle2D[] triangles = new Triangle2D[10];
		  
		/*  
			-prepare to open the MyTriangles.txt file. 
			-Be sure to handle any exceptions
			-Be sure to create a Scanner
	    */
	   	try
	    {
	    	File file1 = new File("MyTriangles.txt"); 	//this makes it so MyTriangles.txt can be read and implemented 
	    	Scanner input = new Scanner(file1);			//if the file does not exist, it throws an exception to the catch block
	    
		/*  
		    Now set up a loop to read in the 10 triangles from the 
			MyTriangles.txt file. You need to declare variables for 
			x1, y1, x2, y2, x3, y3. Then inside the for loop use (x1, y1),
			(x2, y2), (x3, y3) to create the Triangle objects and store 
			them in triangles array.
			finally, be sure to close the input file.
		*/
	    	for(int i = 0; i < 10; i++)		//for each of the 10 triangles
			{
				double x1 = input.nextDouble();
				double y1 = input.nextDouble();
				double x2 = input.nextDouble();
				double y2 = input.nextDouble();
				double x3 = input.nextDouble();
				double y3 = input.nextDouble();
				
				triangles[i] = new Triangle2D(x1, y1, x2, y2, x3, y3);
			} 
			input.close();
	    }
		
		catch(IOException ex)	//catches if file does not exist
	    {
			System.out.println("File for Triangles does not exist.");
			System.exit(0);
	    }

    
    
	/*
		 Here is where you can use MyPoint to create an array
		 points that will store the 100 points you will read in from 
		 the text file MyPoints.txt. You need to be sure to handle 
		 any potential exceptions.
		 You will need a for loop that reads all 100 x's and all 100 y's
		 and then use your points array you just created to store your 
		 coordinates. Be sure to close the input file.
	*/		
		MyPoint[] points = new MyPoint[100];
		  
	   	try
	    {
	    	File file2 = new File("MyPoints.txt");		//this makes it so MyPoints.txt can be read and implemented
	    	Scanner input = new Scanner(file2);			//if the file does not exist, it throws an exception to the catch block
	    
		
	    	for(int i = 0; i < 100; i++)		//for all 100 points
			{
				double x = input.nextDouble();
				double y = input.nextDouble();
				
				points[i] = new MyPoint(x, y);
			} 
			input.close();
	    }
		
		catch(IOException ex)	//catches if file does not exist
	    {
			System.out.println("File for Points does not exist.");
			System.exit(0);
	    }
   	
   	
	  
	// Now that we have them read into an array, output the statistics in a table:
	// First, define the separator and header lines, so we can just display 'em, then the format string
	// USE THIS CODE EXACTLY AS PRINTED. DO NOT MODIFY.
/*******************************DO NOT CHANGE THE CODE INSIDE HERE**************************************************************************************************/	  
	  
	String Sep1 = "+---------+----------------------------------------------------+-----------+-----------+--------------------+---------------------+--------------+";
	String Hdr1 = "|Triangle |                     Coordinates                    |           |           |      Contains      |      Overlaps       |  Point Stats |";
	String Hdr2 = "|    #    |     (X1,  Y1)        (X2,  Y2)        (X3,  Y3)    | Perimeter |   Area    |1 2 3 4 5 6 7 8 9 10| 1 2 3 4 5 6 7 8 9 10| num/100  %   |";
	String Fmt1 = "|%5d    | (%6.2f, %6.2f) (%6.2f, %6.2f) (%6.2f, %6.2f) | %7.2f   | %7.2f   |";
	
	System.out.println(Sep1);
	System.out.println(Hdr1);
	System.out.println(Hdr2);
	System.out.println(Sep1);
	
/*********************************END OF CODE BLOCK THAT YOU ARE NOT TO MODIFY*******************************************************************************************/	
	
	
	/*
		Now that you have the header for the table in place, you need to 
		take the information for the triangles that you have stored and put it
		into the table. You need a for loop to do this.
	*/
	for (int i = 0; i < 10; i++) // For each of the 10 triangles
	{
		
		//System.out.printf(Fmt1, i, triangles[i].getP1().getX()....
		//you need to finish the System.out.printf statement.
		System.out.printf(Fmt1, i, triangles[i].getP1().getX(), triangles[i].getP1().getY(),
								   triangles[i].getP2().getX(), triangles[i].getP2().getY(),
								   triangles[i].getP3().getX(), triangles[i].getP3().getY(),
				 				   triangles[i].getPerimeter(), triangles[i].getArea());
	
		
	/*		
		Now you have all your triangle data 'printed' to the table,
		next you need to use a for loop to check each triangle to see
		if it is 'contained' in the others. You need a condition to check
		to make sure you don't compare triangle 1 to triangle 1...and instead
		print a '-' in that spot of the grid. You may find the 
		ternary operator very useful here for deciding whether to print 
		the 'Y' or the 'N'. Once you have completed a row in the table,
		you must end the table with a '|'.
	*/
		for(int j = 0; j < 10; j++)		//comparing triangle i to triangle j
		{
			if(i == j)						//this checks if they are the same triangle
				System.out.print("- ");
			else							//if they are not the same, then see if the triangle is contained
				System.out.print(triangles[i].contains(triangles[j]) ? 'Y' + " " : 'N' + " ");
		}
			
		System.out.print("| ");	
	
		
	/*
		Now repeat everything you JUST did, but this time use the 
		overlaps method that you wrote. Be sure to end each line with 
		'|'.
	*/
	
		for(int j = 0; j < 10; j++)		//comparing triangle i to triangle j
		{
			if(i == j)						//this checks if they are the same triangle
					System.out.print("- ");
			else							//if they are not the same, then see if the triangle is contained
				System.out.print(triangles[i].overlaps(triangles[j]) ? 'Y' + " " : 'N' + " ");
		}				
		
			System.out.print("| ");	

		
	/*
		Finally for the last two columns in your table, you must write a 
		for loop that goes through all 10 triangles and then have another 
		nested for loop that goes through all 100 points. You will need
		a conditional statement to check and see if a point is in a given
		triangle and a counter to keep track when a point IS inside a 
		given triangle. Once you have all the data, you need to print it
		to the table. I left a couple print statements to help you out.
	*/
	    
			int inside = 0;		//this is the number of the points inside the triangle
			for (int j = 0; j < 10; j++)	//for all of the triangles
			{
				for(int k = 0; k < 100; k++)	//for all of the points
					if(triangles[i].contains(points[k].getX(), points[k].getY())) inside++;		//is the point inside of the triangle?
			}																					//if so, increase 'inside' by one
					
				
		    System.out.printf(" %3d  %5.1f%% ", inside/10, inside*10.0/100.0);
	
	
		    System.out.println("|"); // End of the line!     
	    
	}
	
	System.out.println(Sep1); // Another separator line to form the bottom of the box
	
	
	
	
	
/**********************************RECTANGLES******************************************************************************************************/	
/******************REPEAT EVERYTHING YOU JUST DID WITH SOME MODIFICATIONS**********************************************************************/
	
	
	//create an array to store objects called rectangles.
			Rectangle2D[] rectangles = new Rectangle2D[10];
			  
			/*  
				-prepare to open the MyRectangles.txt file. 
				-Be sure to handle any exceptions
				-Be sure to create a Scanner
		    */
		   	try
		    {
		    	File file3 = new File("MyRectangles.txt");		//this makes it so MyRectangles.txt can be read and implemented
		    	Scanner input = new Scanner(file3);				//if the file does not exist, it throws an exception to the catch block
		    
			/*  
			    Now set up a loop to read in the 10 rectangles from the 
				MyRectangles.txt file. You need to declare variables for 
				x, y, width, and height. Then inside the for loop use 
				(x,y, width, height) to create the rectangle objects and 
				store them in rectangle array.
				finally, be sure to close the input file.
			*/
		    	for(int i = 0; i < 10; i++)			//for each of the 10 rectangles
				{
					double x = input.nextDouble();
					double y = input.nextDouble();
					double width = input.nextDouble();
					double height = input.nextDouble();
										
					rectangles[i] = new Rectangle2D(x, y, width, height);
				} 
				input.close();
		    }
			
			catch(IOException ex)		//catches if file does not exist
		    {
				System.out.println("File for Triangles does not exist.");
				System.exit(0);
		    }

	    
		   	
		/*
			 Here is where you can use MyPoint to create an array
			 points that will store the 100 points you will read in from 
			 the text file MyPoints.txt. You need to be sure to handle 
			 any potential exceptions.
			 you will need a for loop that reads all 100 x's and all 100 y's
			 and then use your points array you just created to store your 
			 coordinates. Be sure to close the input file.
		*/		
			
		    //We already have our array have our array MyPoint[] points created with the triangles section,
			//so we are just going to reuse that one
	
	
	// Now that we have them read into an array, output the statistics in a table:
	// First, define the separator and header lines, so we can just display 'em, then the format string

	
/*******************************DO NOT CHANGE THE CODE INSIDE HERE**************************************************************************************************/	  

	String Sep2 = "+---------+------------------------------------+-----------+---------+---------------------+---------------------+-------------+";
	String Hdr3 = "|Rectangle|     Coordinates                    |           |         |       Contains      |       Overlaps      | Points Stats|";
	String Hdr4 = "|    #    |     (X1,   Y1)    height     width | Perimeter |   Area  | 1 2 3 4 5 6 7 8 9 10| 1 2 3 4 5 6 7 8 9 10|num/100   %  |";
	String Fmt2 = "|%5d    | (%6.2f, %6.2f) (%6.2f) (%6.2f) | %7.2f   | %7.2f | ";
	
	System.out.println();
	System.out.println();
	
	System.out.println(Sep2);
	System.out.println(Hdr3);
	System.out.println(Hdr4);
	System.out.println(Sep2);
/*********************************END OF CODE BLOCK THAT YOU ARE NOT TO MODIFY*******************************************************************************************/	

	
/*********************************REPEAT BELOW WHAT YOU DID FOR TRIANGLES WITH MODIFICATIONS AS NEEDED*******************************************************************/	
		
	/*
		Now that you have the header for the table in place, you need to 
		take the information for the rectangles that you have stored and put it
		into the table. You need a for loop to do this.
	*/
	for (int i = 0; i < 10; i++) // For each of the 10 rectangles
	{
		
		//System.out.printf(Fmt1, i, rectangle[i].getX()....
		//you need to finish the System.out.printf statement.
		System.out.printf(Fmt2, i, rectangles[i].getX(), rectangles[i].getY(),
								   rectangles[i].getWidth(), rectangles[i].getHeight(),
				 				   rectangles[i].getPerimeter(), rectangles[i].getArea());
	
		
	/*		
		Now you have all your rectangle data 'printed' to the table,
		next you need to use a for loop to check each rectangle to see
		if it is 'contained' in the others. You need a condition to check
		to make sure you don't compare rectangle 1 to rectangle 1...and instead
		print a '-' in that spot of the grid. You may find the 
		ternary operator very useful here for deciding whether to print 
		the 'Y' or the 'N'. Once you have completed a row in the table,
		you must end the table with a '|'.
	*/
		for(int j = 0; j < 10; j++)		//comparing rectangle i to rectangle j
		{
			if(i == j)					//this checks if they are the same rectangle
				System.out.print("- ");
			else						//if they are not the same, then see if the rectangle is contained
				System.out.print(rectangles[i].contains(rectangles[j]) ? 'Y' + " " : 'N' + " ");
		}
			
		System.out.print("| ");	
	
		
	/*
		Now repeat everything you JUST did, but this time use the 
		overlaps method that you wrote. Be sure to end each line with 
		'|'.
	*/
	
		for(int j = 0; j < 10; j++)		//comparing rectangle i to rectangle j
		{
			if(i == j)					//this checks if they are the same rectangle
				System.out.print("- ");
			else						//if they are not the same, then see if the rectangle overlaps
				System.out.print(rectangles[i].overlaps(rectangles[j]) ? 'Y' + " " : 'N' + " ");
		}
						
		System.out.print("|");	
	
		
	/*
		Finally for the last two columns in your table, you must write a 
		for loop that goes through all 10 triangles and then have another 
		nested for loop that goes through all 100 points. You will need
		a conditional statement to check and see if a point is in a given
		triangle and a counter to keep track when a point IS inside a 
		given triangle. Once you have all the data, you need to print it
		to the table. I left a couple print statements to help you out.
	*/
	    
			int inside = 0;		//this is the number of the points inside the rectangle
			for (int j = 0; j < 10; j++)	//for all of the rectangles
			{
				for(int k = 0; k < 100; k++)	//for all of the points
					if(rectangles[i].contains(points[k].getX(), points[k].getY())) inside++;	//is the point inside of the rectangle?
			}																					//if so, increase 'inside' by one
					
				
		    System.out.printf(" %3d  %5.1f%% ", inside/10, inside*10.0/100.0); 
	
	
		    System.out.println("|"); // End of the line!     
	    
	}
	
	System.out.println(Sep2); // Another separator line to form the bottom of the box
		
		
  }
}
